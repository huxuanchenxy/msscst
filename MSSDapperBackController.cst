<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="VB" Description="Generates a simple asp business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="数据项" Description="选择你需要操作的数据表" %>
<%@ Property Name="SelectFilter" Type="System.String" Optional="True" Category="选项" Description="输入你查询的条件" %>
<%@ Property Name="SelectColls" Type="System.String" Optional="True" Category="选择字段" Description="输入你需要的列名" %>
<%@ Property Name="SearchColls" Type="System.String" Optional="True" Category="查询字段" Description="输入你需要的列名" %>
<%@ Property Name="ImageColls" Type="System.String" Optional="True" Category="图片字段" Description="输入你需要的列名" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>

using Microsoft.AspNetCore.Mvc;
using MSS.API.Common;
using MSS.Platform.Workflow.WebApi.Model;
using MSS.Platform.Workflow.WebApi.Service;
using System.Threading.Tasks;

// Coded By <%= System.Environment.UserName %> <%= DateTime.Now %>
namespace ToBeReplacedNameSpace.Controllers
{
    [Route("api/v1/[controller]")]
    [ApiController]
    public class <%=ConvertToEntity(SourceTable.Name)%>Controller : ControllerBase
    {
        private readonly I<%=ConvertToEntity(SourceTable.Name)%>Service _service;

        public <%=ConvertToEntity(SourceTable.Name)%>Controller(I<%=ConvertToEntity(SourceTable.Name)%>Service service)
        {
            _service = service;
        }
        
        [HttpGet("GetPageList")]
        public async Task<ActionResult<ApiResult>> GetPageList([FromQuery] <%=ConvertToEntity(SourceTable.Name)%>Parm parm)
        {
            ApiResult ret = new ApiResult { code = Code.Failure };
            try
            {
                ret = await _service.GetPageList(parm);

            }
            catch (System.Exception ex)
            {
                ret.msg = string.Format(
                    "获取分页数据<%=ConvertToEntity(SourceTable.Name)%>失败, 异常信息:{0}",
                    ex.Message);
            }
            return ret;
        }

        [HttpPut]
        public async Task<ActionResult<ApiResult>> Update(<%=ConvertToEntity(SourceTable.Name)%> obj)
        {
            ApiResult ret = new ApiResult { code = Code.Failure };
            try
            {
                ret = await _service.Update(obj);
            }
            catch (System.Exception ex)
            {
                ret.msg = string.Format(
                    "更新数据<%=ConvertToEntity(SourceTable.Name)%>失败, 异常信息:{0}",
                    ex.Message);
            }
            return ret;
        }

        [HttpDelete("{ids}")]
        public async Task<ActionResult<ApiResult>> Delete(string ids)
        {
            ApiResult ret = new ApiResult { code = Code.Failure };
            try
            {
                ret = await _service.Delete(ids);
            }
            catch (System.Exception ex)
            {
                ret.msg = string.Format(
                    "删除数据<%=ConvertToEntity(SourceTable.Name)%>失败, 异常信息:{0}",
                    ex.Message);
            }
            return ret;
        }

        [HttpPost]
        public async Task<ActionResult<ApiResult>> Save(<%=ConvertToEntity(SourceTable.Name)%> obj)
        {
            ApiResult ret = new ApiResult { code = Code.Failure };
            try
            {
                ret = await _service.Save(obj);
            }
            catch (System.Exception ex)
            {
                ret.msg = string.Format(
                    "新增数据<%=ConvertToEntity(SourceTable.Name)%>失败, 异常信息:{0}",
                    ex.Message);
            }
            return ret;
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<ApiResult>> GetByID(int id)
        {
            ApiResult ret = new ApiResult { code = Code.Failure };
            try
            {
                ret = await _service.GetByID(id);

            }
            catch (System.Exception ex)
            {
                ret.msg = string.Format(
                    "获取单个数据<%=ConvertToEntity(SourceTable.Name)%>失败, 异常信息:{0}",
                    ex.Message);
            }
            return ret;
        }
    }
}


<script runat="template">
 public string ConvertToEntity(string val)
 {
     var str="";
     string[] arr = val.Split('_');
     foreach(var s in arr)
     {
         var cur = s.Substring(0,1).ToUpper()+s.Substring(1);
         str += cur;
     }
     return str;
 }
</script>

