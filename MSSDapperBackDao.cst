<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="VB" Description="Generates a simple asp business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="数据项" Description="选择你需要操作的数据表" %>
<%@ Property Name="SelectFilter" Type="System.String" Optional="True" Category="选项" Description="输入你查询的条件" %>
<%@ Property Name="SelectColls" Type="System.String" Optional="True" Category="选择字段" Description="输入你需要的列名" %>
<%@ Property Name="SearchColls" Type="System.String" Optional="True" Category="查询字段" Description="输入你需要的列名" %>
<%@ Property Name="ImageColls" Type="System.String" Optional="True" Category="图片字段" Description="输入你需要的列名" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>

using Dapper;
using ToBeReplacedNameSpace.Model;
using System;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


// Coded By <%= System.Environment.UserName %> <%= DateTime.Now %>
namespace ToBeReplacedNameSpace.Data
{
    public interface I<%=ConvertToEntity(SourceTable.Name)%>Repo<T> where T : BaseEntity
    {
        Task<<%=ConvertToEntity(SourceTable.Name)%>PageView> GetPageList(<%=ConvertToEntity(SourceTable.Name)%>Parm param);
        Task<<%=ConvertToEntity(SourceTable.Name)%>> Save(<%=ConvertToEntity(SourceTable.Name)%> obj);
        Task<<%=ConvertToEntity(SourceTable.Name)%>> GetByID(long id);
        Task<int> Update(<%=ConvertToEntity(SourceTable.Name)%> obj);
		Task<int> Delete(string[] ids,int userID);
    }
    
    public class <%=ConvertToEntity(SourceTable.Name)%>Repo : BaseRepo, I<%=ConvertToEntity(SourceTable.Name)%>Repo<<%=ConvertToEntity(SourceTable.Name)%>>
    {
        public <%=ConvertToEntity(SourceTable.Name)%>Repo(DapperOptions options) : base(options) { }
        
        public async Task<<%=ConvertToEntity(SourceTable.Name)%>PageView> GetPageList(<%=ConvertToEntity(SourceTable.Name)%>Parm parm)
        {
            return await WithConnection(async c =>
            {

                StringBuilder sql = new StringBuilder();
                sql.Append($@"  SELECT <% int z = 1;foreach (ColumnSchema column in this.SourceTable.Columns) { if (z != this.SourceTable.Columns.Count){%>
                <%= column.Name%>,<%}else{%><%= column.Name%><%}z++;}%> FROM <%=SourceTable.Name%>
                 ");
                StringBuilder whereSql = new StringBuilder();
                //whereSql.Append(" WHERE ai.ProcessInstanceID = '" + parm.ProcessInstanceID + "'");

                //if (parm.AppName != null)
                //{
                //    whereSql.Append(" and ai.AppName like '%" + parm.AppName.Trim() + "%'");
                //}

                sql.Append(whereSql);
                //验证是否有参与到流程中
                //string sqlcheck = sql.ToString();
                //sqlcheck += ("AND ai.CreatedByUserID = '" + parm.UserID + "'");
                //var checkdata = await c.QueryFirstOrDefaultAsync<TaskViewModel>(sqlcheck);
                //if (checkdata == null)
                //{
                //    return null;
                //}

                var data = await c.QueryAsync<<%=ConvertToEntity(SourceTable.Name)%>>(sql.ToString());
                var total = data.ToList().Count;
                sql.Append(" order by " + parm.sort + " " + parm.order)
                .Append(" limit " + (parm.page - 1) * parm.rows + "," + parm.rows);
                var ets = await c.QueryAsync<<%=ConvertToEntity(SourceTable.Name)%>>(sql.ToString());

                <%=ConvertToEntity(SourceTable.Name)%>PageView ret = new <%=ConvertToEntity(SourceTable.Name)%>PageView();
                ret.rows = ets.ToList();
                ret.total = total;
                return ret;
            });
        }
        
        public async Task<<%=ConvertToEntity(SourceTable.Name)%>> Save(<%=ConvertToEntity(SourceTable.Name)%> obj)
        {
            return await WithConnection(async c =>
            {
                string sql = $@" INSERT INTO `<%=SourceTable.Name%>`(
                    <% int i = 1; foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
                    <% if (column.Name != "id") { if (i != this.SourceTable.Columns.Count) {%><%= column.Name%>,<%}else{%><%=column.Name%><% } } %>
                    <% i++; } %>
                ) VALUES 
                (<% int j = 1; foreach (ColumnSchema column in this.SourceTable.Columns) {  %><% if (column.Name != "id") { if (j != this.SourceTable.Columns.Count) {%>@<%= ConvertToEntity(column.Name)%>,<%}else{%>@<%=ConvertToEntity(column.Name)%><% } } %>
                    <% j++; } %>);
                    ";
                sql += "SELECT LAST_INSERT_ID() ";
                int newid = await c.QueryFirstOrDefaultAsync<int>(sql, obj);
                obj.Id = newid;
                return obj;
            });
        }
        
        public async Task<<%=ConvertToEntity(SourceTable.Name)%>> GetByID(long id)
        {
            return await WithConnection(async c =>
            {
                var result = await c.QueryFirstOrDefaultAsync<<%=ConvertToEntity(SourceTable.Name)%>>(
                    "SELECT * FROM <%=SourceTable.Name%> WHERE id = @id", new { id = id });
                return result;
            });
        }
        
        public async Task<int> Update(<%=ConvertToEntity(SourceTable.Name)%> obj)
        {
            return await WithConnection(async c =>
            {
                var result = await c.ExecuteAsync($@" UPDATE <%=SourceTable.Name%> set 
                                    <% int k = 1; foreach (ColumnSchema column in this.SourceTable.Columns) {  %>
                    <% if (column.Name != "id") { if (k != this.SourceTable.Columns.Count) {%><%= column.Name%>=@<%=ConvertToEntity(column.Name)%>,<%}else{%><%= column.Name%>=@<%=ConvertToEntity(column.Name)%><% } } %>
                    <% k++; } %>
                 where id=@Id", obj);
                return result;
            });
        }
        
        public async Task<int> Delete(string[] ids,int userID)
        {
            return await WithConnection(async c =>
            {
                var result = await c.ExecuteAsync(" Update <%= SourceTable.Name%> set is_del=1" +
                ",updated_time=@updated_time,updated_by=@updated_by" +
                " WHERE id in @ids ", new { ids = ids, updated_time = DateTime.Now, updated_by = userID });
                return result;
            });
        }
    }
}


<script runat="template">
 public string ConvertToEntity(string val)
 {
     var str="";
     string[] arr = val.Split('_');
     foreach(var s in arr)
     {
         var cur = s.Substring(0,1).ToUpper()+s.Substring(1);
         str += cur;
     }
     return str;
 }
</script>

